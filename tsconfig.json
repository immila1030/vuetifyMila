{
  "compilerOptions": {
    "target": "ESNext", // 設定目標 JavaScript 版本，建議使用 ESNext 以保持最新的語言特性。
    "lib": ["DOM", "ESNext"], // 引入 DOM 和最新 ECMAScript 的庫型別。
    "baseUrl": ".", // 設定基本路徑為專案根目錄。
    "module": "ESNext", // 使用 ESNext 模組系統。
    "moduleResolution": "node", // 使用 Node.js 風格的模組解析。
    "paths": {
      "@/*": ["src/*"] // 從 src 目錄導入模組。
    },
    "types": [
      "vite/client", // Vite 的型別定義。
      "unplugin-vue-router/client", // Vue Router 的型別定義。
      "vue" // Vue 的型別定義。
    ],
    "allowJs": true, // 允許導入和編譯 JavaScript 檔案。
    "resolveJsonModule": true, // 允許導入 JSON 檔案。
    "strict": true, // 啟用所有嚴格的型別檢查選項，以確保更高的型別安全性。
    "strictNullChecks": true, // 啟用嚴格的 null 檢查，確保在訪問可能為 null 的值時進行安全檢查。
    "noUncheckedIndexedAccess": true, // 防止在未定義的情況下訪問陣列或物件的索引，減少運行時錯誤。
    "noImplicitOverride": true, // 確保在類中明確使用 `override` 關鍵字，增加代碼的可讀性。
    // "noUnusedLocals": true, // 防止未使用的變數過多導致干擾。
    "esModuleInterop": true, // 支持 CommonJS 和 ES 模組之間的互操作性。
    // "forceConsistentCasingInFileNames": true,
    "isolatedModules": true, // 強制每個檔案作為獨立的模組處理，確保代碼的模組化。
    "skipLibCheck": true, // 跳過文件類型檢查。這對性能很重要，否則將檢查所有內容。
    "moduleDetection": "force", //此選項強制 TypeScript 將所有文件視為模組。這有助於避免 'cannot redeclare block-scoped variable' 錯誤。
    "verbatimModuleSyntax": true, // 強制使用 ESM 的導入和導出語法，確保一致性和可預測性。(如：檔案名稱後面會加入副檔名)
    "declaration": true, // 生成型別宣告檔，以便在創建庫時支持自動完成功能。
  },
  "include": [
    "src/**/*", // 包括 src 目錄下的所有檔案。
    "src/**/*.vue", // 包括所有 Vue 單檔元件。
  ],
  "exclude": ["dist", "node_modules", "cypress"], // 排除編譯輸出目錄、依賴項和測試框架目錄。
  "references": [{ "path": "./tsconfig.node.json" }] // 引用其他 TypeScript 配置檔案。
}
